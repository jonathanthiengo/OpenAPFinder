import threading
from threading import *
import time       
from array import array
import numpy as np
#import re  

# User Validation Modules
from user_validation_module import waiting_for_user_answer
from user_validation_module import *
# Wifi Modules
from wifi_modules import *

# Client Connection Module
from client_connection_module import *

# Implementar_Hash Module
from implement_hash_module import *



# Main Program

blacklistSSID = []
blacklistCounterTimer = 0
blacklistCounterTimerView = 0

def program_run():
    """The program_run() function is the main execution of the ZeroConf program, where the connected SSID to the
    computer is read, and data transfer to the new device (ESP) is performed.
    """

    global blacklistCounterTimer
    global blacklistCounterTimerView
    subprocess.run(['nmcli', 'radio', 'wifi', 'on']) # Enables the Wi-Fi network interface.

    SSID_SAVED = what_wifi()    # Gets the SSID connected to the computer and stores it in the SSID_SAVED variable.
    SSID_PASS_SAVED = what_wifi_pass()  # Gets the password of the SSID connected to the computer and stores it in the SSID_PASS_SAVED variable.
    SmartCare_SSID_piece = "smartZeroconf" # Adds a string to the variable. It will be used to check for a character pattern in the SSID.
    SmartCare_SSID_PASS = "" # Password will be generated by the generate_hash_256() function.
    connect_conter_timer_reset = 0 # Used to reset program if the connection not established

    while True : 
        """Infinite verification loop used to search for a predefined SSID network pattern."""
        # Checks if there is any Wi-Fi connection; if not, returns to the beginning of the program_run() function.
        if what_wifi() == "":
            time.sleep(15)
            program_run()

        SmartCare_SSID = ""
        SmartCare_SSID_PASS = ""
        blacklistCounterTimer += 1
        blacklistCounterTimerView += 1
        print("Searching for SmartCare Network")

        # Used to reset the device blacklist.
        # After 5 minutes, the list will be reset.
        if blacklistCounterTimer > 61:
            blacklistCounterTimer = 0
            blacklistSSID.clear()   # Original clear blacklist
            #blacklistSSID = blacklistSSID[-1:]
        
        # Checks if the blacklist is empty.
        # If it's empty, nothing will sbe printed, but if it contains values, the list will be printed.
        # PS: It will only be printed twice every minute.
        if blacklistCounterTimerView > 7:    
            if len(blacklistSSID) == 0:
                blacklistCounterTimerView = 0
            else:
                print(f"Devices in the Blacklist: {blacklistSSID}")
                blacklistCounterTimerView = 0
        time.sleep(5)
        SmartCare_SSID = scan_ssid_wifi(SmartCare_SSID_piece)  # Searches for the SSID specified in the SmartCare_SSID_piece variable.
        
        if SmartCare_SSID != 0:
            # Check if the found device is in the exclusion list.
            # If the device is not on the list, continue with the connection attempt.
            if SmartCare_SSID not in blacklistSSID: 
                print(f"SmartCare Network Found: {SmartCare_SSID}")
                SmartCare_SSID_PASS = generate_hash_256(SmartCare_SSID.encode('utf-8')) # Generates the ESP password.
                if waiting_for_user_answer(SmartCare_SSID) == 0:
                    print("", end="")
                else:
                    blacklistSSID.append(SmartCare_SSID)
                    program_run()

                while (connect_to_wifi(SmartCare_SSID, SmartCare_SSID_PASS) == False):
                    connect_conter_timer_reset += 1 
                    print("Trying to connect to the SmartCare Network")
                    if connect_conter_timer_reset > 10: # Used to reset program if the connection not established in 20 seconds
                        program_run()
                    time.sleep(2)
                
                if what_wifi() == SmartCare_SSID:
                    time.sleep(7)
                    print("SmartCare ESP SSID:", SmartCare_SSID)
                    if client_connection(SSID_SAVED, SSID_PASS_SAVED,"192.169.1.6") == 1: # if socket connection fail will reset program
                        print("", end="")
                    else:
                        #print(wifi_remover(SmartCare_SSID))
                        wifi_remover(SmartCare_SSID)
                        blacklistSSID.append(SmartCare_SSID)
                        subprocess.run(['nmcli', 'radio', 'wifi', 'off'])
                        time.sleep(2)
                        subprocess.run(['nmcli', 'radio', 'wifi', 'on'])
                        time.sleep(2)
                else:
                    print("Smartcare Wi-Fi Disconnected")
            else:
                print("", end="")
                

#waiting_for_user_answer("SmartCare_SSID")
program_run()